using System.Collections.Generic;

namespace MarketData.Ronin
{
	internal enum FieldTypes
	{
		isDouble,
		isString,
		isLong,
		isDateTime,
	}

	internal sealed class SecurityStates
	{
		internal const int None = 0;
		internal const int Normal = 1;
		internal const int Closed = 2;
		internal const int Halted = 3;
		internal const int NotExist = 4;
		internal const int Deleted = 5;
		internal const int Auction = 6;
		internal const int Crossing = 7;
	}

#if OLD
	internal sealed class L2PartipcantCode
	{
		internal const string AmericanStockExchange = "A";
		internal const string BostonStockExchange = "B";
		internal const string NationalStockExchange = "C";
		internal const string NASDAlternativeDisplayFacility = "D";
		internal const string ISEStockExchange = "I";
		internal const string ChicagoStockExchange = "M";
		internal const string NewYorkStockExchange = "N";
		internal const string PacificStockExchange = "P";
		internal const string NasdaqStockExchangeT = "T";
		internal const string NasdaqStockExchangeQ = "Q";
		internal const string ChicagoBoardOptionsExchange = "W";
		internal const string PhiladelphiaStockExchange = "X";
		internal const string BATSExchange = "Z";

		private static Dictionary<string, string> _idsCTA;
		internal static Dictionary<string, string> IDsCTA
		{
			get
			{
				if (_idsCTA == null)
				{
					_idsCTA = new Dictionary<string, string>();

					_idsCTA.Add("A", "NYSE Amex");
					_idsCTA.Add("B", "NASDAQ OMX BX");
					_idsCTA.Add("C", "National Stock Exchange");
					_idsCTA.Add("D", "FINRA");
					//_idsCTA.Add("E", "");
					_idsCTA.Add("I", "International Securities Exchange");
					//_idsCTA.Add("J", "");
					//_idsCTA.Add("K", "");
					_idsCTA.Add("M", "Chicago Stock Exchange");
					_idsCTA.Add("N", "New York Stock Exchange");
					_idsCTA.Add("P", "NYSE Arca");
					//_idsCTA.Add("Q", "");
					_idsCTA.Add("T", "NASDAQ OMX");
					_idsCTA.Add("W", "CBOE Stock Exchange");
					_idsCTA.Add("X", "NASDAQ OMX PHLX");
					//_idsCTA.Add("Y", "");
					_idsCTA.Add("Z", "BATS Trading");
				}
				return _idsCTA;
			}
		}

		private static Dictionary<string, string> _idsNASDAQ;
		internal static Dictionary<string, string> IDsNASDAQ
		{
			get
			{
				if (_idsNASDAQ == null)
				{
					_idsNASDAQ = new Dictionary<string, string>();

					_idsNASDAQ.Add("A", "NYSE Amex");
					_idsNASDAQ.Add("B", "NASDAQ OMX BX");
					_idsNASDAQ.Add("C", "National Stock Exchange");
					_idsNASDAQ.Add("D", "FINRA ADF");
					_idsNASDAQ.Add("E", "Market Independent (Generated by SIP)");
					_idsNASDAQ.Add("I", "International Securities Exchange");
					_idsNASDAQ.Add("J", "EDGA Exchange, Inc");
					_idsNASDAQ.Add("K", "EDGX Exchange, Inc");
					_idsNASDAQ.Add("M", "Chicago Stock Exchange");
					_idsNASDAQ.Add("N", "NYSE Euronext");
					_idsNASDAQ.Add("P", "NYSE Arca Group");
					_idsNASDAQ.Add("Q", "NASDAQ OMX");
					//_idsNASDAQ.Add("T", "");
					_idsNASDAQ.Add("W", "CBOE Stock Exchange");
					_idsNASDAQ.Add("X", "NASDAQ OMX PHLX");
					_idsNASDAQ.Add("Y", "BATS Y Exchange, Inc");
					_idsNASDAQ.Add("Z", "BATS Exchange, Inc");
				}
				return _idsNASDAQ;
			}
		}
	}

	internal sealed class OptionExchangeCode
	{
		internal static string CBOE = "C";
		internal static string C2 = "W";
		internal static string BOX = "B";
		internal static string AMEX = "A";
		internal static string PHLX = "X";
		internal static string PCX = "N";
		internal static string ISE = "I";
		internal static string NSDQ = "Q";
		internal static string BATS = "Z";

		private static Dictionary<string, string> _ids;
		internal static Dictionary<string, string> IDs
		{
			get
			{
				if (_ids == null)
				{
					_ids = new Dictionary<string, string>();

					_ids.Add("C", "CBOE");
					_ids.Add("W", "C2");
					_ids.Add("B", "BOX");
					_ids.Add("A", "AMEX");
					_ids.Add("X", "PHLX");
					_ids.Add("N", "PCX");
					_ids.Add("I", "ISE");
					_ids.Add("Q", "NSDQ");
					_ids.Add("Z", "BATS");
				}
				return _ids;
			}
			set
			{
				_ids = value;
			}
		}
	}

	internal sealed class OptionDataSource
	{
		internal const string OPRA = "OPRA";
		internal const string OPRANBBO = "OPRANBBO";
		internal const string CME = "CME";
		internal const string ICE = "ICE";
	}
#endif // OLD

	internal sealed class SubscriptionSecTypes
	{
		internal const int Future = 1;
		internal const int SSFuture = 2;
		internal const int Option = 3;
		internal const int OptionOnFuture = 4;
		internal const int Stock = 5;
	}

	internal static class WombatFieldIDs
	{
		internal const ushort SubscriptionSoruce = 7001;
		internal const ushort SubscriptionSymbol = 7002;

		internal const int IssueSymbol = 305;
		internal const int IndexSymbol = 293;			// Backup

		//internal const int uSubscriptionSoruce = -101;
		//internal const int uSubscriptionSymbol = -102;
		internal const int uSymbol = -103;
		internal const int uParticipentSymbol = -104;
		internal const int uParticipentName = -105;

		internal const int InstrumentType = 298;
		internal const int LineTime = 1174;

		internal const int uOnMsgTime = -501;
		internal const int uDecodedTime = -502;
		internal const int uServerSentTime = -503;
		internal const int uClientRecivedTime = -504;
		internal const int uDisplayTime = -505;

		internal const int NetChange = 341;
		internal const int PctChange = 431;
		internal const int TotalVolume = 475;
		internal const int HighPrice = 278;
		internal const int IndexHigh = 286;		// Backup
		internal const int LowPrice = 327;
		internal const int IndexLow = 287;		// Backup
		internal const int OpenPrice = 407;
		internal const int AdjPrevClosePrice = 520;
		internal const int PrevClosePrice = 436;
		internal const int PrevCloseDate = 435;
		internal const int ClosePrice = 242;
		internal const int TotalValue = 474;
		internal const int Vwap = 494;

		internal const int BidPrice = 237;
		internal const int IndexBid = 280;		// Backup
		internal const int BidSize = 238;
		internal const int BidLow = 234;
		internal const int BidHigh = 233;
		internal const int BidPartId = 236;

		internal const int AskPrice = 109;
		internal const int IndexAsk = 279;		// Backup
		internal const int AskSize = 110;
		internal const int AskLow = 106;
		internal const int AskHigh = 105;
		internal const int AskPartId = 108;

		internal const int QuoteDate = 519;
		internal const int QuoteTime = 442;
		internal const int QuoteCount = 1034;

		internal const int TradePrice = 481;
		internal const int IndexValue = 295;		// Backup
		internal const int TradeDate = 476;
		internal const int TradeTime = 485;
		internal const int TradeTick = 484;
		internal const int TradeVolume = 488;
		internal const int TradePartId = 480;
		internal const int TradeCount = 901;

		// Stock L1
		internal const int PrimExch = 645;
		internal const int SecurityStatus = 451;
		internal const int Condition = 243;

		// Future L1
		internal const int ProductInd = 1520;
		internal const int DisplayConversionFactor = 1518;
		internal const int OrderMinQty = 513;
		internal const int OrderMaxQty = 514;
		internal const int MaxPriceVariation = 3341;
		internal const int Maturity = 1525;
		internal const int BookDepth = 2276;
		internal const int TicketIncrement = 515;
		internal const int InstrumentGroup = 510;
		internal const int MinPriceIncrementAmount = 3345;
		internal const int MainFraction = 3342;
		internal const int HighLimit = 277;
		internal const int LowLimit = 326;
		internal const int SettlePrice = 458;
		internal const int SettleDate = 456;
		internal const int LastBestAskPrice = 4026;
		internal const int LastBestBidPrice = 4025;
		internal const int ExchTotalVol = 2516;

		// Option L1
		internal const int PutCall = 439;
		internal const int ExpirationDate = 262;
		internal const int StrikePrice = 469;
		internal const int OpenInterest = 406;
		internal const int PrevBidClose = 433;
		internal const int PrevBidCloseDate = 434;
		internal const int BidClose = 504;
		internal const int BidCloseDate = 505;
		internal const int PrevAskClose = 506;
		internal const int PrevAskCloseDate = 507;
		internal const int AskClose = 502;
		internal const int AskClosedate = 503;

		// SRLab Fields
		internal const int AuctionPrice = -200;
		internal const int AuctionVolume = -201;
		internal const int MidPrice = -202;
		internal const int UncrossingStatus = -203;

		//CF_PREVCLOSE_PRICE = 4,
		//CF_CLOSE_PRICE = 5,
		//CF_OPEN_PRICE = 6,
		//CF_HIGH_PRICE = 7,
		//CF_LOW_PRICE = 8,
		//CF_SETTLE_PRICE = 9,
		//CF_INDEX_PRICE = 10,
		//CF_INDEX_BID = 11,
		//CF_INDEX_ASK = 12,
		
		internal const int CloseBestBid = -213;
		internal const int CloseBestBidSize = -214;
		internal const int CloseBestAsk = -215;
		internal const int CloseBestAskSize = -216;

		internal const int OpenBestBid = -217;
		internal const int OpenBestBidSize = -218;
		internal const int OpenBestAsk = -219;
		internal const int OpenBestAskSize = -220;

		internal const int BestBid = -221;
		internal const int BestAsk = -222;
		internal const int RFQSide = -223;
		internal const int CalcClosingPrice = -224;
		internal const int OpenVol = -225;
		internal const int RFQVol = -226;
		internal const int AUCSide = -227;

		//CF_STRIKE_PRICE = 28,

		internal const int CabinetPrice = -229;

		//CF_EXPIRATION_DATE = 30,
		//CF_SETTLE_DATE = 31,

		//CF_MATURITY_DATE = 35,
		//CF_TOTAL_VOL = 36,
		
		internal const int LotSize = -237;
		internal const int CFMax = -238;
	}

	internal static class MDOutputFieldIDs
	{
		private static Dictionary<int, FieldTypes> _fTypes;
		internal static Dictionary<int, FieldTypes> FTypes
		{
			get
			{
				if (_fTypes == null)
				{
					_fTypes = new Dictionary<int, FieldTypes>();
					_fTypes.Add(WombatFieldIDs.IssueSymbol, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.IndexSymbol, FieldTypes.isString);

					_fTypes.Add(WombatFieldIDs.SubscriptionSoruce, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.SubscriptionSymbol, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.uSymbol, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.uParticipentSymbol, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.uParticipentName, FieldTypes.isString);

					_fTypes.Add(WombatFieldIDs.InstrumentType, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.LineTime, FieldTypes.isString);

					_fTypes.Add(WombatFieldIDs.uOnMsgTime, FieldTypes.isDateTime);
					_fTypes.Add(WombatFieldIDs.uDecodedTime, FieldTypes.isDateTime);
					_fTypes.Add(WombatFieldIDs.uServerSentTime, FieldTypes.isDateTime);
					_fTypes.Add(WombatFieldIDs.uClientRecivedTime, FieldTypes.isDateTime);
					_fTypes.Add(WombatFieldIDs.uDisplayTime, FieldTypes.isDateTime);

					_fTypes.Add(WombatFieldIDs.NetChange, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.PctChange, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.TotalVolume, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.HighPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.IndexHigh, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.LowPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.IndexLow, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.OpenPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.AdjPrevClosePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.ClosePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.PrevClosePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.PrevCloseDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.TotalValue, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.Vwap, FieldTypes.isDouble);

					_fTypes.Add(WombatFieldIDs.SettlePrice, FieldTypes.isDouble);

					_fTypes.Add(WombatFieldIDs.BidPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.BidSize, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.BidLow, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.BidHigh, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.BidPartId, FieldTypes.isString);

					_fTypes.Add(WombatFieldIDs.AskPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.AskSize, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.AskLow, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.AskHigh, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.AskPartId, FieldTypes.isString);

					_fTypes.Add(WombatFieldIDs.QuoteDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.QuoteTime, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.QuoteCount, FieldTypes.isLong);

					_fTypes.Add(WombatFieldIDs.TradePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.IndexValue, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.TradeDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.TradeTime, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.TradeTick, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.TradeVolume, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.TradePartId, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.TradeCount, FieldTypes.isLong);

					// Stock L1
					_fTypes.Add(WombatFieldIDs.PrimExch, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.SecurityStatus, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.Condition, FieldTypes.isString);

					// Future L1
					_fTypes.Add(WombatFieldIDs.ProductInd, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.DisplayConversionFactor, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.OrderMinQty, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.OrderMaxQty, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.MaxPriceVariation, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.Maturity, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.BookDepth, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.TicketIncrement, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.InstrumentGroup, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.MinPriceIncrementAmount, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.MainFraction, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.HighLimit, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.LowLimit, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.SettlePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.SettleDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.LastBestAskPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.LastBestBidPrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.ExchTotalVol, FieldTypes.isLong);

					// Option L1
					_fTypes.Add(WombatFieldIDs.PutCall, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.ExpirationDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.StrikePrice, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.OpenInterest, FieldTypes.isLong);
					_fTypes.Add(WombatFieldIDs.PrevBidClose, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.PrevBidCloseDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.BidClose, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.BidCloseDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.PrevAskClose, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.PrevAskCloseDate, FieldTypes.isString);
					_fTypes.Add(WombatFieldIDs.AskClose, FieldTypes.isDouble);
					_fTypes.Add(WombatFieldIDs.AskClosedate, FieldTypes.isString);
				}
				return _fTypes;
			}
		}

		private static Dictionary<int, string> _fNames;
		internal static Dictionary<int, string> FNames
		{
			get
			{
				if (_fNames == null)
				{
					_fNames = new Dictionary<int, string>();
					_fNames.Add(WombatFieldIDs.IssueSymbol, "IssueSymbol");
					_fNames.Add(WombatFieldIDs.IndexSymbol, "IndexSymbol");

					_fNames.Add(WombatFieldIDs.SubscriptionSoruce, "SubscriptionSoruce");
					_fNames.Add(WombatFieldIDs.SubscriptionSymbol, "SubscriptionSymbol");
					_fNames.Add(WombatFieldIDs.uSymbol, "uSymbol");
					_fNames.Add(WombatFieldIDs.uParticipentSymbol, "uParticipentSymbol");
					_fNames.Add(WombatFieldIDs.uParticipentName, "uParticipentName");

					_fNames.Add(WombatFieldIDs.InstrumentType, "InstrumentType");
					_fNames.Add(WombatFieldIDs.LineTime, "LineTime");

					_fNames.Add(WombatFieldIDs.uOnMsgTime, "uOnMsgTime");
					_fNames.Add(WombatFieldIDs.uDecodedTime, "uDecodedTime");
					_fNames.Add(WombatFieldIDs.uServerSentTime, "uServerSentTime");
					_fNames.Add(WombatFieldIDs.uClientRecivedTime, "uClientRecivedTime");
					_fNames.Add(WombatFieldIDs.uDisplayTime, "uDisplayTime");

					_fNames.Add(WombatFieldIDs.NetChange, "NetChange");
					_fNames.Add(WombatFieldIDs.PctChange, "PctChange");
					_fNames.Add(WombatFieldIDs.TotalVolume, "TotalVolume");
					_fNames.Add(WombatFieldIDs.HighPrice, "HighPrice");
					_fNames.Add(WombatFieldIDs.IndexHigh, "IndexHigh");
					_fNames.Add(WombatFieldIDs.LowPrice, "LowPrice");
					_fNames.Add(WombatFieldIDs.IndexLow, "IndexLow");
					_fNames.Add(WombatFieldIDs.OpenPrice, "OpenPrice");
					_fNames.Add(WombatFieldIDs.ClosePrice, "ClosePrice");
					_fNames.Add(WombatFieldIDs.AdjPrevClosePrice, "AdjPrevClosePrice");
					_fNames.Add(WombatFieldIDs.PrevClosePrice, "PrevClosePrice");
					_fNames.Add(WombatFieldIDs.PrevCloseDate, "PrevCloseDate");
					_fNames.Add(WombatFieldIDs.TotalValue, "TotalValue");
					_fNames.Add(WombatFieldIDs.IndexValue, "IndexValue");
					_fNames.Add(WombatFieldIDs.Vwap, "Vwap");

					_fNames.Add(WombatFieldIDs.BidPrice, "BidPrice");
					_fNames.Add(WombatFieldIDs.BidSize, "BidSize");
					_fNames.Add(WombatFieldIDs.BidLow, "BidLow");
					_fNames.Add(WombatFieldIDs.BidHigh, "BidHigh");
					_fNames.Add(WombatFieldIDs.BidPartId, "BidPartId");

					_fNames.Add(WombatFieldIDs.AskPrice, "AskPrice");
					_fNames.Add(WombatFieldIDs.AskSize, "AskSize");
					_fNames.Add(WombatFieldIDs.AskLow, "AskLow");
					_fNames.Add(WombatFieldIDs.AskHigh, "AskHigh");
					_fNames.Add(WombatFieldIDs.AskPartId, "AskPartId");

					_fNames.Add(WombatFieldIDs.QuoteDate, "QuoteDate");
					_fNames.Add(WombatFieldIDs.QuoteTime, "QuoteTime");
					_fNames.Add(WombatFieldIDs.QuoteCount, "QuoteCount");

					_fNames.Add(WombatFieldIDs.TradePrice, "TradePrice");
					_fNames.Add(WombatFieldIDs.TradeDate, "TradeDate");
					_fNames.Add(WombatFieldIDs.TradeTime, "TradeTime");
					_fNames.Add(WombatFieldIDs.TradeTick, "TradeTick");
					_fNames.Add(WombatFieldIDs.TradeVolume, "TradeVolume");
					_fNames.Add(WombatFieldIDs.TradePartId, "TradePartId");
					_fNames.Add(WombatFieldIDs.TradeCount, "TradeCount");

					// Stock L1
					_fNames.Add(WombatFieldIDs.PrimExch, "PrimExch");
					_fNames.Add(WombatFieldIDs.SecurityStatus, "SecurityStatus");
					_fNames.Add(WombatFieldIDs.Condition, "Condition");

					// Future L1
					_fNames.Add(WombatFieldIDs.ProductInd, "ProductInd");
					_fNames.Add(WombatFieldIDs.DisplayConversionFactor, "DisplayConversionFactor");
					_fNames.Add(WombatFieldIDs.OrderMinQty, "OrderMinQty");
					_fNames.Add(WombatFieldIDs.OrderMaxQty, "OrderMaxQty");
					_fNames.Add(WombatFieldIDs.MaxPriceVariation, "MaxPriceVariation");
					_fNames.Add(WombatFieldIDs.Maturity, "Maturity");
					_fNames.Add(WombatFieldIDs.BookDepth, "BookDepth");
					_fNames.Add(WombatFieldIDs.TicketIncrement, "TicketIncrement");
					_fNames.Add(WombatFieldIDs.InstrumentGroup, "InstrumentGroup");
					_fNames.Add(WombatFieldIDs.MinPriceIncrementAmount, "MinPriceIncrementAmount");
					_fNames.Add(WombatFieldIDs.MainFraction, "MainFraction");
					_fNames.Add(WombatFieldIDs.HighLimit, "HightLimit");
					_fNames.Add(WombatFieldIDs.LowLimit, "LowLimit");
					_fNames.Add(WombatFieldIDs.SettlePrice, "SettlePrice");
					_fNames.Add(WombatFieldIDs.SettleDate, "SettleDate");
					_fNames.Add(WombatFieldIDs.LastBestAskPrice, "LastBestAskPrice");
					_fNames.Add(WombatFieldIDs.LastBestBidPrice, "LastBestBidPrice");
					_fNames.Add(WombatFieldIDs.ExchTotalVol, "ExchTotalVol");

					// Option L1
					_fNames.Add(WombatFieldIDs.PutCall, "PutCall");
					_fNames.Add(WombatFieldIDs.ExpirationDate, "ExpirationDate");
					_fNames.Add(WombatFieldIDs.StrikePrice, "StrikePrice");
					_fNames.Add(WombatFieldIDs.OpenInterest, "OpenInterest");
					_fNames.Add(WombatFieldIDs.PrevBidClose, "PrevBidClose");
					_fNames.Add(WombatFieldIDs.PrevBidCloseDate, "PrevBidCloseDate");
					_fNames.Add(WombatFieldIDs.BidClose, "BidClose");
					_fNames.Add(WombatFieldIDs.BidCloseDate, "BidCloseDate");
					_fNames.Add(WombatFieldIDs.PrevAskClose, "PrevAskClose");
					_fNames.Add(WombatFieldIDs.PrevAskCloseDate, "PrevAskCloseDate");
					_fNames.Add(WombatFieldIDs.AskClose, "AskClose");
					_fNames.Add(WombatFieldIDs.AskClosedate, "AskClosedate");
				}
				return _fNames;
			}
		}

		private static Dictionary<string, int> _fIDs;
		internal static Dictionary<string, int> FIDs
		{
			get
			{
				if (_fIDs == null)
				{
					_fIDs = new Dictionary<string, int>();
					foreach (int key in FNames.Keys)
					{
						_fIDs.Add(FNames[key], key);
					}
				}
				return _fIDs;
			}
		}
	}

	internal sealed class MDInputFieldIDs
	{
		internal const int MsgType = 1;
		internal const int Username = 2;
		internal const int Password = 3;
		internal const int MDSymbol = 4;
		internal const int MDDataSource = 5;
		internal const int MDSubscriptionType = 6;

		internal const int SecType = 50;
		internal const int Reload = 51;

		internal const int FirstTime = 101;
	}
}
