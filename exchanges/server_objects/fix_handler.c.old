/**************************************************************************
 * Copyright (c) 2008 by Ronin Capital, LLC
 *
 * All Rights Reserved
 *************************************************************************/

#include <stdio.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <errno.h>
#include <pthread.h>
#ifdef _WIN32
#include <winsock2.h>
#else
#include <unistd.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/tcp.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#endif

#include "fix_handler.h"
#include "dart_constants.h"
#include "client_manager.h"
#include "parser_func.h"
#include "transaction_recorder.h"
#include "hashmap.h"


#define DEF_FIX_SIZE 1400

static pthread_mutex_t init_mutex = PTHREAD_MUTEX_INITIALIZER;
static pthread_mutex_t seq_mutex = PTHREAD_MUTEX_INITIALIZER;
static hashmap_t con_ptr;
static int is_init = 0;
static void init_map() {
  pthread_mutex_lock(&init_mutex);
  if(is_init) {
    //do nothing
  } else {
    is_init = 1;
    con_ptr = create_map(20);
  }
  pthread_mutex_unlock(&init_mutex);  
}



static int local_fix_sock_send(struct parse_con* pc, char* data, unsigned long len) {
  //  printf("Sending this man bytes: %lu", len);
  long sent_bytes;
  long bytes_to_send;
  sent_bytes = 1;
  bytes_to_send = (long)len;
  while (sent_bytes < bytes_to_send && sent_bytes > 0) {
    sent_bytes = send(pc->co->sock, data, len, 0);
  }
  return 0;
}


struct fix_con_obj {
  char* sender_compid;
  int sc_len;
  char* target_compid;
  int tc_len;
  unsigned long in_seq;
  unsigned long out_seq;
};

static int calc_check_sum(const char* begin, int len) {
  int sum = 0;
  int i;
  const char* c;
  c = begin;
  for(i = 0; i < len; ++i) {
    sum = (sum +  *c);
    ++c;
  }
  sum = sum % 256;
  return sum;
}


static int add_fix_con(struct fix_con_obj* co) {
  struct fix_con_obj* temp;  
  int res;
  pthread_mutex_lock(&seq_mutex);
  temp = NULL;
  res = get_map_entry(con_ptr, co->target_compid, co->tc_len, (void*)&temp);
  if(res > 0) {
    remove_from_map(con_ptr, co->target_compid, co->tc_len);
    free(temp);
  }
  no_copy_insert(con_ptr, co->target_compid, co->tc_len, co);
  pthread_mutex_unlock(&seq_mutex);
  return 0;
}

static struct fix_con_obj* get_fix_con_obj(const char* name, int name_len) {
  struct fix_con_obj* temp;
  struct fix_con_obj* ret;
  int res;
  pthread_mutex_lock(&seq_mutex);
  temp = NULL;
  ret = NULL;
  res = get_map_entry(con_ptr, name, name_len,(void*)&temp);
  if(res > 0) {
    ret = malloc(sizeof(struct fix_con_obj));
    ret->sender_compid = temp->sender_compid;
    ret->sc_len = temp->sc_len;
    ret->target_compid = temp->target_compid;
    ret->tc_len = temp->tc_len;
    ret->out_seq = (temp->out_seq + 1);
    ret->in_seq = temp->in_seq;
    temp->out_seq = ret->out_seq;
    
  }
  pthread_mutex_unlock(&seq_mutex);
  return ret;
}

static void remove_fix_con(struct fix_con_obj* co) {
  pthread_mutex_lock(&seq_mutex);
  if(co->target_compid != NULL) {
    remove_from_map(con_ptr, co->target_compid, co->tc_len);
  } else {
    printf("Received a null name for a fix connection unable to remove.\n");
  }
  free(co);
  pthread_mutex_unlock(&seq_mutex);
}

/**
 * This function will find the first 
 * instance of FIX_FIELD_VALUE_DELIM and then find the next instance of a 
 * FIX_FIELD_DELIM and then calloc a new string with the
 * value.
 */
static char* copy_tag_value(char* mblk, int len, int* tag_len) {
  char* ret_value;
  char* d_off;
  d_off = mblk;
  ret_value = strchr(d_off, FIX_FIELD_VALUE_DELIM);//find_offset(d_off, len, vd, 2);
  if(ret_value) {
    d_off += (ret_value - d_off) + 1;
    ret_value = strchr(d_off, FIX_FIELD_DELIM);//find_offset(d_off, (len - (ret_value +1)), fd, 2);
    if(ret_value) {
      char* val;
      val = calloc((ret_value - d_off) + 1, 1);
      *tag_len = (ret_value - d_off);
      memcpy(val, d_off, *tag_len);
      return val;
    } else {
      return NULL;
    }
  } else {
    return NULL;
  }
}

static int polish_n_send(struct message* m) {
  struct message m1;
  char* sender;
  char* d_off;
  int total_len;
  int len;
  int ret_code;
  ret_code = 0;
  sender = calloc(DEF_FIX_SIZE, 1);
  total_len = 0;
  d_off = sender;
  len = sprintf(d_off, "8=FIX.4.2%c9=%lu", FIX_FIELD_DELIM, (m->len - 1));
  d_off += len;
  total_len += len;
  memcpy(d_off, m->message, m->len);
  d_off += m->len;
  total_len += m->len;
  len = calc_check_sum(sender, total_len);
  len = sprintf(d_off, "10=%03d%c", len, FIX_FIELD_DELIM);
  total_len += len;
  //We have copied the message now free the old one and replace it with the new message.
  //free(m->message);
  // m->message = sender;
  //m->len = total_len;
  //struct message m1;
  m1.name = m->name;
  m1.name_len = m->name_len;
  m1.message = sender;
  m1.len = total_len;
  ret_code = send_message(&m1);
  free(sender);
  return ret_code;
}

static long get_sequence(char* mblk, int len) {
  char* ret_code;//long ret_code;
  char* d_off;  
  char sq[5] = {FIX_FIELD_DELIM,'3', '4',FIX_FIELD_VALUE_DELIM,'\0'};
  d_off = mblk;
  ret_code = strstr(d_off, sq);//find_offset(d_off, len, sq, 5);
  if(ret_code) {
    unsigned long res;
    d_off += (ret_code - d_off) + 4;
    res = 0;
    res = atol(d_off);
    return res;
  } else {
    return 0;
  }
}

static int create_logon(char* mblk, int len, const char* sender_comp, const char* target_comp, long sequence) {
  char* d_off;
  int total_len;
  int l_len;
  total_len = 0;
  d_off = mblk;
  l_len = sprintf(d_off, "%c35=A", FIX_FIELD_DELIM );
  total_len += l_len;
  d_off += l_len;
  l_len = create_fix_header(d_off, (len - l_len), sender_comp, target_comp, sequence);
  d_off += l_len;
  total_len += l_len;
  l_len = sprintf(d_off, "98=0%c108=30%c", FIX_FIELD_DELIM,FIX_FIELD_DELIM); 
  total_len += l_len;
  return total_len;
}

static int compare_times(int h, int m) {
  time_t rawtime;
  struct tm* ti;
  time(&rawtime);
  ti = localtime(&rawtime);
  if(ti->tm_hour == h && (ti->tm_min >= m && (m + 5) >= ti->tm_min)) {
    return 1;
  } else {
    return 0;
  }
}

int create_timestamp(char* mblk, int len) {
  time_t rawtime;
  struct tm* ti;
  int year;
  int month;
  time(&rawtime);
  ti = gmtime(&rawtime);
  year = 1900 + ti->tm_year;
  month = 1 + ti->tm_mon;
  return sprintf(mblk, "%04d%02d%02d-%02d:%02d:%02d%c", year, month, ti->tm_mday, ti->tm_hour, ti->tm_min, ti->tm_sec, FIX_FIELD_DELIM);
}

int create_fix_header(char* mblk, int len, const char* sender_comp, const char* target_comp,
		      unsigned long seq) {
  char* d_off;
  int s_len;
  int total_len;
  total_len = 0;
  d_off = mblk;
  s_len = sprintf(d_off, "%c49=%s%c56=%s%c", FIX_FIELD_DELIM, sender_comp, FIX_FIELD_DELIM, target_comp,
    FIX_FIELD_DELIM);
  total_len += s_len;
  d_off += s_len;
  s_len = sprintf(d_off, "34=%lu%c52=", seq, FIX_FIELD_DELIM);
  total_len += s_len; 
  d_off += s_len;
  s_len = create_timestamp(d_off, len);
  total_len += s_len;
  return total_len;
}

int pack_on_fix_header(char* mblk, int mblk_len, char* builder, int builder_len, 
		       const char* sender_comp, const char* target_comp, 
		       unsigned long seq){
  int total_len;
  char* b_off;
  int len = 0;
  b_off = builder;
  total_len = 0;
  len = create_fix_header(b_off,len, sender_comp, target_comp, seq);
  b_off += len;
  total_len += len;
  memcpy(b_off, mblk, mblk_len);
  total_len += mblk_len;
  return total_len;
}

unsigned long build_fix_offsets(queue_t q, char* data, unsigned long size,
			    unsigned long byte_offset, unsigned long* seq_num) {
  if(size > 0) {
    //    unsigned long seq_num;
    char eol[5]= {FIX_FIELD_DELIM,'1', '0',
      FIX_FIELD_VALUE_DELIM,'\0'};
    char* d_off;
    unsigned long read_bytes;
    long ret_code;
    unsigned long l_seq;
    read_bytes = 0;
    ret_code = 0;

    l_seq = *seq_num;
    
    d_off = data;

    ret_code = find_offset(d_off, size, eol, 5);
    while (ret_code >= 0) {
      struct seq_offset* off;
      if((read_bytes + ret_code + FIX_EOM_OFFSET) > size) {
        *seq_num = l_seq;
        return read_bytes;
      }
      off = malloc(sizeof(struct seq_offset));
      off->seq = l_seq;
      off->beg_off = read_bytes + byte_offset;       
      read_bytes += (unsigned long)ret_code;
      read_bytes += FIX_EOM_OFFSET;
      off->end_off = read_bytes + byte_offset;
      enqueue(q,off);
      d_off = d_off + ret_code + FIX_EOM_OFFSET;
      ++l_seq;
      ret_code = find_offset(d_off, (size-read_bytes), eol, 5);
    }
    *seq_num = l_seq;
    return read_bytes;
  }
  return size;
}


static void build_logout(char* name, int name_len, const char* reason, int rlen) {
  char* builder;
  char* d_off;
  int total_len;
  struct fix_con_obj* fco;
  int len;
  total_len = 0;
  builder = calloc(500, 1);
  d_off = builder;
  len = sprintf(d_off, "%c35=5", FIX_FIELD_DELIM);
  d_off += len;
  total_len += len;

  fco = NULL;
  fco = get_fix_con_obj(name, name_len);
  if(fco != NULL) {
    struct message* m1;    
    len = create_fix_header(d_off, total_len, fco->sender_compid, fco->target_compid, fco->out_seq);    
    total_len += len;
    d_off += len;
    len = sprintf(d_off, "58=%s%c", reason, FIX_FIELD_DELIM);
    total_len += len;
    d_off += len;
    m1 = malloc(sizeof(struct message));
    m1->message = builder;
    m1->name = name;
    m1->name_len = name_len;
    m1->len = total_len;
    polish_n_send(m1);
    free(m1->message);
    free(m1); 
    free(fco);
  } else {
    printf("Could not find fix connection for: %s while trying to logout.\n", name);
  }
}

static void request_resend(char* name, int n_len, unsigned long request_start) {
  char* builder;
  char* d_off;
  int total_len;
  struct fix_con_obj* fco;
  int len;
  total_len = 0;
  builder = calloc(500, 1);
  d_off = builder;
  len = sprintf(d_off, "%c35=2", FIX_FIELD_DELIM);
  d_off += len;
  total_len += len;

  fco = NULL;  
  fco = get_fix_con_obj(name, n_len);
  if(fco != NULL) {
    struct message* m1;
    len = create_fix_header(d_off, total_len, fco->sender_compid, fco->target_compid, fco->out_seq);
    total_len += len;
    d_off += len;
    len = sprintf(d_off, "7=%lu%c16=0%c", request_start, FIX_FIELD_DELIM, FIX_FIELD_DELIM);
    total_len += len;
    d_off += len;
    m1 = malloc(sizeof(struct message));
    m1->message = builder;
    m1->name = name;
    m1->name_len = n_len;
    m1->len = total_len;
    polish_n_send(m1);
    free(m1->message);
    free(m1); 
    free(fco);
  } else {
    printf("Could not find fix connection for: %s while trying to request a resend.\n", name);
  }  
}


int send_logon(struct parse_args* pa) {
  struct sequence_req* sr;
  char* mblk;
  char* sender_id;
  char* target_id;
  struct fix_con_obj* fco;
  int len;
  struct message* m;
  init_map();
  sr = malloc(sizeof(struct sequence_req));
  sr->name = pa->con->co->name;
  sr->name_len = pa->con->co->name_len;
  sr->parse_messages = &build_fix_offsets;
  sr->incoming = 0;
  sr->outgoing = 0;
  sr->create_new = compare_times(pa->con->in_args->reset_time->reset_hour, pa->con->in_args->reset_time->reset_min);
  get_sequence_numbers(sr);
  pa->con->co->in_seq = sr->incoming + 1;
  pa->con->co->out_seq = sr->outgoing + 1;
  free(sr);
  mblk = calloc(DEF_FIX_SIZE, 1);
  sender_id = NULL;
  target_id = pa->con->co->name;
  sender_id = pa->con->in_args->sender_comp;
  fco = malloc(sizeof(struct fix_con_obj));
  fco->sender_compid = sender_id;
  fco->sc_len = pa->con->in_args->sc_len;
  fco->target_compid = target_id;
  fco->tc_len = pa->con->co->name_len;
  fco->in_seq = pa->con->co->in_seq;
  fco->out_seq = pa->con->co->out_seq;
  len = create_logon(mblk, 8192, sender_id, target_id, sr->outgoing);
  m = malloc(sizeof(struct message));
  m->name = target_id;
  m->name_len = pa->con->co->name_len;
  m->message = mblk;
  m->len = len;
  pa->con->init_con(pa->con->co);
  polish_n_send(m);
  add_fix_con(fco);
  free(m->message);
  free(m);
  return 0;
}

static struct init_args* validate_target_comp(char* name, int name_len, queue_t in_args) {
  if(name != NULL && name_len > 0) {
    element_t e;
    e = front(in_args);//dequeue(in_args);
    while(e != NULL) {
      struct init_args* init;
      init = (struct init_args*)e->d;
      if(init != NULL) {
        if(init->tc_len == name_len && (strncmp(name, init->target_comp, name_len) == 0)) {
          return init;
        }
        e = e->next;
      } else {
        printf("Struct was null element was not: %s\n", name);
        e = e->next;
      }
    }
    printf("Element was null for: %s\n", name);
    return NULL;
  } else {
    printf("Name was null or name_len was 0 or less.\n");
    return NULL;
  }
}

static void handle_fix_logon(struct message* m, int* cut_con, struct parse_con* pc,   struct incoming_message* m1) {
  char* d_off;
  long ret_code;
  char fix_send[5] = {FIX_FIELD_DELIM, '4', '9', FIX_FIELD_VALUE_DELIM,'\0'};
  ret_code = 0;
  d_off = m->message;
  ret_code = find_offset(d_off, m->len, fix_send, 5);
  if(ret_code >= 0) {
    char* name;
    int n_len;
    d_off += ret_code;
    n_len = 0;
    name = copy_tag_value(d_off, (m->len - ret_code), &n_len);
    pc->in_args = validate_target_comp(name, n_len, pc->in_args_list);
    if(pc->in_args != NULL) {
      unsigned long other_seq;
      init_map();
      m->name = name;
      m->name_len = n_len;
      m1->name = name;
      m1->name_len = n_len;      
      other_seq = get_sequence(m->message, m->len);
      pc->co->name = name;
      pc->co->name_len = n_len;
      //Check if we need to send a logon response
      if(pc->is_server) {
        int create_new = 0;
        struct fix_con_obj* fco;
        struct sequence_req* sr;
        int len;
        char* mblk;
        struct message* m2;
        fco = get_fix_con_obj(name, n_len);
        create_new = fco == NULL ? (pc->in_args->reset_time->create_new): 0;//
        sr = malloc(sizeof(struct sequence_req));
        sr->name = pc->co->name;
        sr->name_len = n_len;
        sr->parse_messages = &build_fix_offsets;
        sr->incoming = 0;
        sr->outgoing = 0;
        sr->create_new = create_new;
        get_sequence_numbers(sr);
        //Since we have already had a logon today we no longer
        //want to reset the sequences.
        //pc->reset_time->create_new = 0;
        //add the sequences intor the connection object;
        pc->co->in_seq = sr->incoming;
        pc->co->out_seq = sr->outgoing + 1;
	
        if(create_new || fco == NULL) {
          // struct fix_con_obj* fco;
          fco = malloc(sizeof(struct fix_con_obj));
          fco->sender_compid = NULL;
          fco->target_compid = name;
          fco->tc_len = n_len;
          fco->in_seq = sr->incoming;//pc->co->in_seq;
          fco->out_seq = sr->outgoing + 1;//pc->co->out_seq;
          fco->sender_compid = pc->in_args->sender_comp;
          fco->sc_len = pc->in_args->sc_len;
        }
        free(sr);
        mblk = calloc(DEF_FIX_SIZE, 1);
        len = create_logon(mblk, DEF_FIX_SIZE, fco->sender_compid, fco->target_compid, fco->out_seq);

        m2 = malloc(sizeof(struct message));
        m2->name =name;
        m2->name_len = n_len;
        m2->message = mblk;
        m2->len = len;
        pc->init_con(pc->co);
        polish_n_send(m2);
        add_fix_con(fco);
        free(m2->message);
        free(m2);
      }
      pc->connection_notice(pc->co, 1);
      if(other_seq > (pc->co->in_seq + 1)) {
        request_resend(name, n_len,(pc->co->in_seq +1));
      } else if(other_seq < pc->co->in_seq) {
        char reason[100];
        int reason_len;
        reason_len = 0;
        reason_len = sprintf(reason, "Seq to low: got %ld expected %lu", other_seq, pc->co->in_seq);
        //logout.
        build_logout(name, n_len, reason, reason_len);
        *cut_con = 1;
        pc->connection_notice(pc->co, 0);
      }
    } else {
      printf("Unable pull sender comp ID from this: %s \n", d_off);
      *cut_con = 1;
    }
  } else {
    printf("Unable to find senderCompId in fix message: %s \n", m->message);
    *cut_con = 1;
  }
}

static void test_req_response(struct message* m, struct parse_con* pc) {
  char* builder;
  char* d_off;
  int total_len;
  int len;
  struct fix_con_obj* fco;
  total_len = 0;
  builder = calloc(400, 1);
  d_off = builder;
  len = sprintf(d_off, "%c35=0", FIX_FIELD_DELIM);
  d_off += len;
  total_len += len;
  fco = NULL;
  fco = get_fix_con_obj(m->name, m->name_len);
  if(fco != NULL) {
    char fix_test_req_id[6] = {FIX_FIELD_DELIM,	'1', '1','2',
      FIX_FIELD_VALUE_DELIM, '\0'};
    long test_req;
    len = create_fix_header(d_off,total_len, fco->sender_compid, fco->target_compid, fco->out_seq);
    total_len += len;
    d_off += len;
    test_req = find_offset(m->message, m->len, fix_test_req_id, 6);
    if(test_req >= 0) {
      char* m_off;
      long eot;
      char fix_delim_str[2] = {FIX_FIELD_DELIM, '\0'};
      m_off = m->message;
      m_off += test_req + 1;    
      eot = find_offset(m_off, (m->len - (test_req + 1)),fix_delim_str, 2);
      if(eot >= 0) {
        struct message* m1;
        long req_len = eot + 1;
        memcpy(d_off, m_off, req_len);
        total_len += req_len;        
        m1 = malloc(sizeof(struct message));
        m1->message = builder;
        m1->name = m->name;
        m1->name_len = m->name_len;
        m1->len = total_len;
        polish_n_send(m1);
        free(m1->message);
        free(m1);
      } else {
        free (builder);
        printf("could not find end of test request: %s \n", m->message);
        //ACE_DEBUG((LM_DEBUG, "REQ ID Problem: %s start of test req id= %d fix tag delim = %d\n", mblk->rd_ptr(), test_req, eot));
      }
      free(fco);
    } else {
      free(builder);
      printf("Could not find entry for: %s \n", m->name);
      //ACE_DEBUG((LM_DEBUG, "FAILED TO FIND TEST REQ ID: %s\n", mblk->rd_ptr()));
    }  
  }
}

static void reset_seq_number(struct message* m, struct parse_con* pc, int* cut_con) {
  char* d_off;
  long res;
  char new_seq[5] = {FIX_FIELD_DELIM, '3', '6', FIX_FIELD_VALUE_DELIM,'\0'};
  d_off = m->message;
  res = find_offset(d_off, m->len, new_seq, 5);
  if(res >= 0) {
    unsigned long n_seq;
    unsigned long m_seq = get_sequence(m->message, m->len);
    d_off += res + 4;
    n_seq = 0;
    n_seq = atol(d_off);    
    if(n_seq > m_seq && n_seq > pc->co->in_seq) {
      struct incoming_message* m1;
      long diff = n_seq - m_seq;
      pc->co->in_seq = n_seq;
      m1 = malloc(sizeof(struct incoming_message));
      m1->name = m->name;
      m1->name_len = m->name_len;
      m1->num = diff;
      record_inbound_message(m1);
    } else {
      struct incoming_message* m1;
      char reason[100];
      int reason_len;
      reason_len = 0;
      reason_len = sprintf(reason, "Reset Seq Problem: %ld > %ld", m_seq, n_seq);
      //logout.
      build_logout(m->name, m->name_len,reason, reason_len);
      *cut_con = 1;
      m1 = malloc(sizeof(struct incoming_message));
      m1->name = m->name;
      m1->name_len = m->name_len;
      m1->num = 1;
      record_inbound_message(m1);
    }
  } else {
    printf("Not a valid Sequence Reset: %s Message: %s", m->name, m->message);
  }
}
static long create_gap_fill(char* output, long out_len, struct parse_con* pc, unsigned long seq) {
  char* builder;
  char* d_off;
  char* t_off;
  long len;
  long total_len;
  long output_len;
  output_len = 0;
  len = 0;
  total_len = 0;
  builder = calloc(500,1);
  d_off = builder;
  t_off = output;
  len = sprintf(d_off, "%c35=4", FIX_FIELD_DELIM);
  d_off += len;
  total_len += len;
  len = create_fix_header(d_off, (out_len - total_len), pc->in_args->sender_comp, pc->in_args->target_comp, seq);
  total_len += len;
  d_off += len;
  len = sprintf(d_off, "43=Y%c97=Y%c122=", FIX_FIELD_DELIM, FIX_FIELD_DELIM);
  total_len += len;
  d_off += len;
  len = create_timestamp(d_off, (out_len - total_len));
  total_len += len;
  d_off += len;
  len = sprintf(d_off, "123=Y%c36=%lu%c", FIX_FIELD_DELIM, (seq + 1), FIX_FIELD_DELIM);
  total_len += len;
  d_off += len;
  len = sprintf(output, "8=FIX.4.2%c9=%ld", FIX_FIELD_DELIM, (total_len -1));
  output += len;
  output_len += len;
  if(out_len > total_len) {
    int check_sum;
    memcpy(output, builder, total_len);
    output += total_len;
    output_len += total_len;
    check_sum = calc_check_sum(t_off, output_len);
    len = sprintf(output, "10=%03d%c", check_sum, FIX_FIELD_DELIM);
    output_len += len;
    output += len;
  } else {
    printf("We ran out of space in create_gap_fill. out_len: %lu total_len %lu {%s} \n", out_len, total_len, output);
    free(builder);
    return -1;
  }
  free(builder);
  //printf("GAP FILL ADD: %s\n", output);
  return output_len;
}
static long resend_message(char* start, long sLen, char* output, long out_len, struct parse_con* pc, long seq) {
  char fix_time_tag[5] = {FIX_FIELD_DELIM,'5', '2', FIX_FIELD_VALUE_DELIM,'\0'};
  char* builder;
  char* d_off;
  char* orig_out;
  char* s_off;
  long len;
  long total_len;
  long output_len;
  long ts_off;
  orig_out = output;
  output_len = 0;
  len = 0;
  total_len = 0;
  builder = calloc(500,1);
  d_off = builder;
  s_off = start;
  len = sprintf(d_off, "%c35=%c", FIX_FIELD_DELIM, start[0]);
  total_len += len;
  d_off += len;
  len = create_fix_header(d_off, (out_len - total_len), pc->in_args->sender_comp, pc->in_args->target_comp, seq);
  total_len += len;
  d_off += len;
  len = sprintf(d_off, "43=Y%c97=Y%c122=", FIX_FIELD_DELIM, FIX_FIELD_DELIM);
  total_len += len;
  d_off += len;
  ts_off = find_offset(s_off, sLen, fix_time_tag, 5);
  if(ts_off >= 0) {
    long time_len;
    int check_sum;
    s_off += (ts_off + 4);
    time_len = sLen - (ts_off + 4);
    memcpy(d_off, s_off, time_len);
    d_off += time_len;
    total_len += time_len;
    len = sprintf(output, "8=FIX.4.2%c9=%ld", FIX_FIELD_DELIM, (total_len -1));
    output += len;
    output_len += len;
    orig_out += len;
    memcpy(output, builder, total_len);
    output += total_len;
    output_len += total_len;
    check_sum = calc_check_sum(orig_out, output_len);
    len = sprintf(output, "10=%03d%c", check_sum, FIX_FIELD_DELIM);
    output_len += len;
    output += len;
    free(builder);
  } else {
    printf("Unable to find original sending time. \n");
    free(builder);
    return 0;
  }
  return output_len;
}
static long determine_resend(char* d_off, long dLen, char* output, long out_len, struct parse_con* pc) {
  char fix_msg_type[5] = {FIX_FIELD_DELIM,'3', '5', FIX_FIELD_VALUE_DELIM,'\0'};
  long type_off = 0;
  char* t_off = d_off;
  long total_len;
  unsigned long seq;  
  long ret_val;
  total_len = 0;
  ret_val = 0;
  type_off = find_offset(t_off, dLen, fix_msg_type, 5);
  if(type_off >= 0) {
    char val;
    t_off += (type_off + 4);
    val = t_off[0];
    seq = get_sequence(t_off, dLen);
    switch(val) {
    case '8':
    case 'F':
      ret_val = resend_message(t_off, (dLen - (type_off + 4)), output, out_len, pc, seq);
      total_len += ret_val;
      break;
    default:
      ret_val = create_gap_fill(output, out_len, pc, seq);
      if(ret_val > 0) {
        total_len += ret_val;
      } else {
        printf("Ran out of space in gap fill sent this many %ld. \n", out_len);
        return total_len;
      }
    };
  } else {
    printf("Could not find message type flag in resend parse.");
  }
  return total_len;
}
static void parse_resend_mess(struct resend_req* rr, struct parse_con* pc, struct message* m) {
  char fix_end_msg[5] = {FIX_FIELD_DELIM,'1', '0', FIX_FIELD_VALUE_DELIM,'\0'};
  long cur_off;
  long cur_len;
  long end_pos;
  char* d_off;
  long len = rr->len;
  long total_len = 0;
  char* final_resend;
  int size;
  int should_parse = 1;
  char* f_resend;
  d_off = rr->output;
  end_pos = 0;
  cur_off = 0;
  cur_len = 0;
  size = rr->len * 2;
  final_resend  = calloc(size, 1);
  f_resend = final_resend;  
  while(should_parse && len > 5) {
    end_pos = find_offset(d_off, len, fix_end_msg, 5);
    if(end_pos > 0) {
      long l_len;
      cur_len = end_pos + 1;
      end_pos += 8;
      len -= end_pos;      
      l_len = determine_resend(d_off, cur_len, f_resend, size, pc);
      total_len += l_len;
      cur_off += end_pos;
      d_off += end_pos;
      f_resend += l_len;
      size -= l_len;
      //printf("RESEND: %s\n", final_resend);
    } else {
      should_parse = 0;
    }    
  }
  //printf("Resent this: {%s}", final_resend);
  local_fix_sock_send(pc, final_resend, total_len);
  free(final_resend);
}
static void handle_resend_request(struct message* m, struct parse_con* pc) {
  char fix_begin_res[4] = {FIX_FIELD_DELIM, '7', FIX_FIELD_VALUE_DELIM,'\0'};
  char fix_end_res[5] = {FIX_FIELD_DELIM,'1', '6', FIX_FIELD_VALUE_DELIM,'\0'};
  long res_code = 0;
  char* d_off;
  d_off = m->message;
  res_code = find_offset(d_off, m->len, fix_begin_res, 4);
  if(res_code >= 0) {
    long beg_res;
    long end_res = 0;
    struct resend_req* rr;
    d_off += res_code + 3;
    beg_res = atoi(d_off);    
    d_off = m->message;
    res_code = find_offset(d_off, m->len, fix_end_res, 5);
    if(res_code >= 0) {
      d_off += res_code + 4;
      end_res = atoi(d_off);
    } else {
      printf("Unable to find end sequence!!! %s in message: %s ", m->name, m->message);
    }
    rr = malloc(sizeof(struct resend_req));
    rr->name = m->name;
    rr->name_len = m->name_len;
    rr->beg = beg_res;
    rr->end = end_res;
    rr->output = 0;
    rr->len = 0;
    get_resend_request(rr);
    if(rr->len > 0) {
      //printf("RR_OUT: {%s} LEN = {%lu}\n",rr->output, rr->len);
      parse_resend_mess(rr, pc, m);
      free(rr->output);
    }
    free(rr);
  } else {
    printf("Unable to find Begin sequence!!! %s in message: %s ", m->name, m->message);
  }
}

static void handle_admin_message(struct message* m, int* cut_con, struct parse_con* pc, char type) {
  struct incoming_message* m1;
  m1 = malloc(sizeof(struct incoming_message));
  m1->name = m->name;
  m1->name_len = m->name_len;
  m1->num = 1;
  
  switch(type) {
  case FIX_LOGON:
    handle_fix_logon(m, cut_con, pc, m1);
    record_inbound_message(m1);
    break;
  case FIX_RESEND:
    handle_resend_request(m, pc);
    record_inbound_message(m1);
    break;
  case FIX_TEST_REQ:
    test_req_response(m, pc);
    record_inbound_message(m1);
    break;
  case FIX_LOGOUT:
    *cut_con = 1;
    record_inbound_message(m1);
    break;
  case FIX_SEQ_RESET:
    reset_seq_number(m, pc, cut_con);
    free(m1);
    break;
  default:
    record_inbound_message(m1);
    break;
  }
}

static void determine_msg_type(char* mlbk, unsigned long len, int* cut_con, struct parse_con* pc) {
  char type[4] = {'3', '5', FIX_FIELD_VALUE_DELIM,'\0'};
  char* d_off;
  char* ret_code;
  ret_code = 0;
  d_off = mlbk;
  ret_code = strstr(d_off, type);
  if(ret_code) {
    struct message* m;
    m = malloc(sizeof(struct message));
    m->name = pc->co->name;
    m->name_len = pc->co->name_len;
    m->len = len;
    m->message = mlbk;
    ret_code += 3;
    if(ret_code[0] == FIX_ORDER_S || ret_code[0] == FIX_REPLACE_REQ ||
       ret_code[0] == FIX_CANCEL_REQ || ret_code[0] == FIX_EXEC) {
         struct incoming_message* m1;
         pc->callback(m);  
         m1 = malloc(sizeof(struct incoming_message));
         m1->name =pc->co->name;
         m1->name_len = pc->co->name_len;
         m1->num = 1;
         record_inbound_message(m1);
    } else {
      handle_admin_message(m, cut_con, pc, ret_code[0]);
    }
    free(m);
    
  } else {
    printf("Unable to determine type of message: %s !!\n", mlbk);
  }
}

unsigned long parse_fix_message(const char* rd_ptr, unsigned long len, int* cut_con, struct parse_con* pc) {
  unsigned long read_bytes = 0;
  if(len > FIX_BEG_MESSAGE_LEN) {
    int byte_len = 0;
    long mess_len = 0;
    char* ret_code;
    long len_left = len;
    int should_parse = 1;
    char* d_off;
    d_off = (char*) rd_ptr;
    while (should_parse && len_left > 0 && read_bytes < len) {
      d_off += FIX_BEG_MESSAGE_LEN;
      read_bytes += FIX_BEG_MESSAGE_LEN;
      byte_len = atoi(d_off);
      ret_code = strchr(d_off, FIX_FIELD_DELIM);
      if(ret_code) {
        mess_len = (ret_code - d_off) + 1 + byte_len + FIX_CHECKSUM_LEN;
        if(mess_len <= len_left) {
          d_off += (ret_code - d_off) + 1;
          determine_msg_type(d_off, mess_len, cut_con, pc);
          d_off += byte_len + FIX_CHECKSUM_LEN;
          read_bytes += mess_len;
          len_left -= mess_len;
        } else {
          //printf("Partial message orig len: %lu, len_left: %ld, read_bytes: %lu, d_off %s  \n", len, len_left, read_bytes, d_off);
          should_parse = 0;
          read_bytes -= FIX_BEG_MESSAGE_LEN;
        }
      } else {
        printf("Could not find a ASCII TAG 1: %lu, len_left: %ld, read_bytes: %lu, d_off %s  \n", len, len_left, read_bytes, d_off);
        should_parse = 0;
        read_bytes -= FIX_BEG_MESSAGE_LEN;
      }      
    }
  } else {
    printf("Len is < 12 %lu \n", len);
  }
  return read_bytes;  
}

void send_heart_beat(char* name, int name_len) {
  char* sender;
  char* d_off;
  int len;
  struct fix_con_obj* fco;
  sender = calloc(400,1);
  d_off = sender;  
  len = sprintf(d_off, "%c35=0", FIX_FIELD_DELIM );
  d_off += len;  
  fco = NULL;
  fco = get_fix_con_obj(name, name_len);
  if(fco != NULL) {  
    struct message* m;
    int llen = create_fix_header(d_off, len,fco->sender_compid, fco->target_compid, fco->out_seq);
    len += llen;
    m = malloc(sizeof(struct message));
    m->name = name;
    m->name_len = name_len;
    m->message = sender;
    m->len = len;
    polish_n_send(m);
    free(m->message);
    free(m);
    free(fco);
  } else {
    free(sender);
    printf("Unable to send heart beat for: %s \n", name);
  }
}

int send_fix_message(struct message* m) {
  struct message m1;
  long total_len;
  char* builder;
  char* d_off;
  char* m_off;
  int len;
  long mlen = 0;
  int ret_code = 0;
  int should_delete = 1;
  struct fix_con_obj* l_obj;
  l_obj = NULL;
  l_obj = get_fix_con_obj(m->name, m->name_len);
  if(l_obj == NULL) {
    struct sequence_req* sr;
    struct init_args* in_arg;
    printf("Could not find connection for this name: %s \n", m->name);
    ret_code = -1;
    should_delete = 0;
    init_map();
    sr = malloc(sizeof(struct sequence_req));
    sr->name = m->name;
    sr->name_len = m->name_len;
    sr->parse_messages = &build_fix_offsets;
    sr->incoming = 0;
    sr->outgoing = 0;
    sr->create_new = 0;
    get_sequence_numbers(sr);
    in_arg = NULL;
    in_arg = find_config(m->name, m->name_len);
    if(in_arg != NULL) {     
      l_obj = malloc(sizeof(struct fix_con_obj));
      l_obj->sender_compid = in_arg->sender_comp;
      l_obj->sc_len = in_arg->sc_len;
      l_obj->target_compid = in_arg->target_comp;
      l_obj->tc_len = in_arg->tc_len;
      l_obj->in_seq = sr->incoming;
      l_obj->out_seq = sr->outgoing;
      add_fix_con(l_obj);
    } else {
      printf("Got a NULL init_args for: %s\n", m->name);
      return -1;
    }
  }
  total_len = 0;

  builder = calloc(DEF_FIX_SIZE, 1);
  d_off = builder;
  len = sprintf(d_off, "%c", FIX_FIELD_DELIM);
  d_off += len;
  total_len += len;
  m_off = m->message;
  if(m->message[4] == FIX_FIELD_DELIM) {
    memcpy(d_off, m_off, 4);
    m_off += 5;
    d_off += 4;
    total_len += 4;
    mlen = 5;
  } else {
    memcpy(d_off, m_off, 5);
    m_off += 6;
    d_off += 5;
    total_len += 5;
    mlen = 6;
  }
  len = create_fix_header(d_off, DEF_FIX_SIZE, l_obj->sender_compid, 
			  l_obj->target_compid, l_obj->out_seq);
  total_len += len;
  d_off += len;
  memcpy(d_off, m_off, (m->len - mlen));
  total_len += (m->len - mlen);
  //free(m->message);
  //m->message = builder;
  //m->len = total_len;
  //struct message m1;
  m1.name = m->name;
  m1.name_len = m->name_len;
  m1.message = builder;
  m1.len = total_len;
  polish_n_send(&m1);
  if(should_delete) {
    free(l_obj);
  }
  free(builder);
  return ret_code;  
}

